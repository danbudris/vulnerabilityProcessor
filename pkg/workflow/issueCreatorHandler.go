package workflow

import (
	"context"
	"fmt"

	"github.com/danbudris/vulnerabilityProcessor/pkg/api"
	"github.com/danbudris/vulnerabilityProcessor/pkg/issueManager"
	"github.com/danbudris/vulnerabilityProcessor/pkg/vexManager"
)

type GithubIssueCreatorOpts struct {
	Labels *[]string
}

func IssueCreatorHandler(m *vexManager.Manager, i *issueManager.IssueManager, o GithubIssueCreatorOpts) *githubIssueCreatorHandler {
	return &githubIssueCreatorHandler{
		manager: m,
		issueManager: i,
		labels: o.Labels,
	}
}

type githubIssueCreatorHandler struct {
	manager            *vexManager.Manager
	issueManager       *issueManager.IssueManager
	labels             *[]string
	owner              *string
	repo               *string
	next               VulnerabilityHandler
}

func (h *githubIssueCreatorHandler) Handle(ctx context.Context, wCtx *Context, v *api.VulnerabilityFinding) error {
	openState := "open"
	o := &issueManager.CreateIssueOpts{
		Title:    h.issueTitle(*v),
		Body:     h.issueBody(*v),
		Labels:   h.labels,
		Assignee: nil,
		State:    &openState,
	}

	issue, err := h.issueManager.CreateIssue(ctx, o)
	if err != nil {
		return fmt.Errorf("creating issue in handler: %v", err)
	}
	wCtx.AddIssue(*issue.URL)

	if h.next != nil {
		return h.next.Handle(ctx, wCtx, v)
	}
	return nil
}

func (h *githubIssueCreatorHandler) SetNextHandler(handler VulnerabilityHandler) {
	h.next = handler
}

func (h *githubIssueCreatorHandler) issueBody(v api.VulnerabilityFinding) *string {
	b := "sup yo"
	return &b
}

func (h *githubIssueCreatorHandler) issueTitle(v api.VulnerabilityFinding) *string {
	t := "it's an issue yo"
	return &t
}