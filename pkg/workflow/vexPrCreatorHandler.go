package workflow

import (
	"context"
	"fmt"
	"strings"

	"github.com/danbudris/vulnerabilityProcessor/pkg/api"
	prcreator "github.com/danbudris/vulnerabilityProcessor/pkg/prManager"
	"github.com/danbudris/vulnerabilityProcessor/pkg/vexManager"
)

type VexPrCreatorOpts struct {
	AuthorName          string
	AuthorEmail         string
	PrBranch            string
	VexDocumentGitPath  string
}

func VexPrCreatorHandler(m *vexManager.Manager, p *prcreator.PrCreator, opts VexPrCreatorOpts) *prCreatorHandler {
	return &prCreatorHandler{
		manager: m,
		prCreator: p,
		prAuthorName: opts.AuthorName,
		prAuthorEmail: opts.AuthorEmail,
		prBranch: opts.PrBranch,
		vexDocumentGitPath: opts.VexDocumentGitPath,
	}
}

type prCreatorHandler struct {
	manager            *vexManager.Manager
	prCreator          *prcreator.PrCreator
	prAuthorName       string
	prAuthorEmail      string
	prBranch           string
	vexDocumentGitPath string
	next               VulnerabilityHandler
}

func (h *prCreatorHandler) Handle(ctx context.Context, wCtx *Context, v *api.VulnerabilityFinding) error {
	content, err := h.manager.DocumentJson()
	if err != nil {
		return fmt.Errorf("getting document JSON while creating PR in handler: %v", err)
	}
	o := &prcreator.CreatePrOpts{
		CommitBranch:    v.VulnerabilityId,
		SourceFileBody:  content,
		DestFileGitPath: h.vexDocumentGitPath,
		AuthorName:      h.prAuthorName,
		AuthorEmail:     h.prAuthorEmail,
		CommitMessage:   commitMessage(*v),
		PrSubject:       prSubject(*v),
		PrBranch:        h.prBranch,
		PrDescription:   prDescription(*v),
		BaseBranch:      "main",
	}
	pr, err := h.prCreator.CreatePr(o)
	if err != nil {
		return fmt.Errorf("creating pr in handler: %v", err)
	}

	wCtx.AddPullRequest(pr)

	if h.next != nil {
		return h.next.Handle(ctx, wCtx, v)
	}
	return nil
}

func (h *prCreatorHandler) SetNextHandler(handler VulnerabilityHandler) {
	h.next = handler
}

func prSubject(v api.VulnerabilityFinding) string {
	return fmt.Sprintf("%s vulnerability found in %s", v.Severity, v.AffectedResourceId)
}

func commitMessage(v api.VulnerabilityFinding) string {
	return fmt.Sprintf("update VEX document to reflect vulnerability %s in resource %s", v.VulnerabilityId, v.AffectedResourceId)
}

func prDescription(v api.VulnerabilityFinding) string {
	b := strings.Builder{}
	b.WriteString(fmt.Sprintf("This PR auto-generated by Vulnerability Processor\n"))
	b.WriteString(fmt.Sprintf("A vulnerability %s %s has been detected in  %s by %s\n", v.Severity, v.VulnerabilityId, v.AffectedResourceId, v.VulnerabilitySource))
	return b.String()
}