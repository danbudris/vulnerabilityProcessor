package vexManager_test

import (
	"github.com/danbudris/vulnerabilityProcessor/pkg/logger"
	"github.com/danbudris/vulnerabilityProcessor/pkg/vex"
	"github.com/danbudris/vulnerabilityProcessor/pkg/vexManager"
	"github.com/stretchr/testify/assert"
	"testing"
)

const (
	testVexFile = "./testdata/test.vex"
	testCveId = "CVE-2014-0160"
	testProductId = "abcdefg:latest"
)

func TestVexManagerInsertVulnerability(t *testing.T) {
	m, err := VexManager()
	if err != nil {
		t.Fatal("failed to create vex manager", err)
	}
	v, err := Vulnerabilitiy()
	if err != nil {
		t.Fatal("failed to create vulnerability", err)
	}
	originalVulnerabilitiesCount := len(m.Document().Vulnerabilities)

	assert.Nil(t, m.GetVulnerability(v.Cve))
	m.InsertVulnerability(v)
	assert.Equal(t, v, m.GetVulnerability(v.Cve))
	assert.Equal(t, len(m.Document().Vulnerabilities), originalVulnerabilitiesCount + 1)
}

func TestVexManagerInsertVulnerabilityNewProduct(t *testing.T) {
	m, err := VexManager()
	if err != nil {
		t.Fatal("failed to create vex manager", err)
	}
	v, err := Vulnerabilitiy()
	if err != nil {
		t.Fatal("failed to create vulnerability", err)
	}
	p := Product()
	originalVulnerabilitiesCount := len(m.Document().Vulnerabilities)
	originalProductsCount := len(m.Document().ProductTree.Branches)

	assert.Nil(t, m.GetVulnerability(v.Cve))
	assert.Nil(t, m.GetProduct(v.ProductStatus.UnderInvestigation[0]))
	m.InsertVulnerability(v)
	assert.Equal(t, v, m.GetVulnerability(v.Cve))
	assert.Equal(t, p, m.GetProduct(testProductId))
	assert.Equal(t, len(m.Document().ProductTree.Branches), originalProductsCount + 1)
	assert.Equal(t, len(m.Document().Vulnerabilities), originalVulnerabilitiesCount + 1)
}

func TestVexManagerInsertProduct(t *testing.T) {
	m, err := VexManager()
	if err != nil {
		t.Fatal("failed to create vex manager", err)
	}
	p := Product()
	originalProductsCount := len(m.Document().ProductTree.Branches)

	assert.Nil(t, m.GetProduct(p.ProductId))
	m.InsertProduct(p)
	assert.Equal(t, p, m.GetProduct(p.ProductId))
	assert.Equal(t, len(m.Document().ProductTree.Branches), originalProductsCount + 1)
}

func Vulnerabilitiy() (*vex.Vulnerability, error) {
	return &vex.Vulnerability{
		Cve: testCveId,
		ProductStatus: vex.ProductStatus{
			UnderInvestigation: []string{testProductId},
		},
	}, nil
}

func Product() *vex.Product {
	return &vex.Product{
		Name:"",
		ProductId: testProductId}
}

func VexManager() (*vexManager.Manager, error) {
	f := testVexFile
	m, err := vexManager.New(f)
	if err != nil {
		logger.Error(err, "could not load vex file")
		return nil, err
	}
	return m, nil
}