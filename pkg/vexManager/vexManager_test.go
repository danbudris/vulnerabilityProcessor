package vexManager_test

import (
	"github.com/danbudris/vulnerabilityProcessor/pkg/logger"
	"github.com/danbudris/vulnerabilityProcessor/pkg/vex"
	"github.com/danbudris/vulnerabilityProcessor/pkg/vexManager"
	"github.com/stretchr/testify/assert"
	"testing"
)

const (
	testVexFile = "./testdata/test.vex"
)

func TestVexManagerInsertVulnerabilitiy(t *testing.T) {
	m, err := VexManager()
	if err != nil {
		t.Fatal("failed to create vex manager", err)
	}
	v, err := Vulnerabilitiy()
	if err != nil {
		t.Fatal("failed to create vulnerability", err)
	}

	assert.Nil(t, m.GetVulnerability(v.Cve))
	m.InsertVulnerability(v)
	assert.Equal(t, v, m.GetVulnerability(v.Cve))
}

func Vulnerabilitiy() (*vex.Vulnerability, error) {
	return &vex.Vulnerability{}, nil
}

func VexManager() (*vexManager.Manager, error) {
	f := testVexFile
	m, err := vexManager.New(f)
	if err != nil {
		logger.Error(err, "could not load vex file")
		return nil, err
	}
	return m, nil
}