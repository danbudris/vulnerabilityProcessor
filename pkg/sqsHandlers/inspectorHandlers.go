package handlers

import (
	"bytes"
	"encoding/json"
	"fmt"
	"os"

	"github.com/aws/aws-sdk-go/service/inspector2"
	"github.com/aws/aws-sdk-go/service/sqs"

	"github.com/danbudris/vulnerabilityProcessor/pkg/inspectorHelper"
	"github.com/danbudris/vulnerabilityProcessor/pkg/logger"
	"github.com/danbudris/vulnerabilityProcessor/pkg/vexManager"
)


func NewInspector(m *vexManager.Manager) *inspectorHandler {
	return &inspectorHandler{manager: m}
}

type inspectorHandler struct {
	manager *vexManager.Manager
}

func (h *inspectorHandler) HandleMessage(msg *sqs.Message) error {
	b := []byte(*msg.Body)
	f, err := inspectorHelper.ReadFindingFromBytes(b)
	if err != nil {
		return fmt.Errorf("reading finding: %v", err)
	}
	err = h.handleFinding(*f)
	if err != nil {
		logger.Error(err, "handling finding")
	}
	return nil
}

func (h *inspectorHandler) handleFinding(f inspector2.Finding) error {
	h.manager.InsertInspectorFinding(f)
	b, err := json.Marshal(h.manager.Document())
	if err != nil {
		return fmt.Errorf("marshaling json: %v", err)
	}
	buf := &bytes.Buffer{}
	err = json.Indent(buf, b, "", "\t")
	if err != nil {
		return fmt.Errorf("formating json: %v", err)
	}
	_, err = os.Stdout.Write(buf.Bytes())
	if err != nil {
		return fmt.Errorf("writing to stdout: %v", err)
	}
	return nil
}

func (h *inspectorHandler) DeleteMessage(msg *sqs.Message) error {
	fmt.Println("this is where we'd delete the message")
	return nil
}