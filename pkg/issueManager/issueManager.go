package issueManager

import (
	"context"
	"fmt"
	"github.com/danbudris/vulnerabilityProcessor/pkg/retier"
	"github.com/google/go-github/v45/github"
	"golang.org/x/oauth2"
	"strings"
	"time"

	"github.com/danbudris/vulnerabilityProcessor/pkg/git"
	githubHelper "github.com/danbudris/vulnerabilityProcessor/pkg/github"
	"github.com/danbudris/vulnerabilityProcessor/pkg/logger"
)

var client *github.Client

type IssueManager struct {
	sourceOwner  string
	sourceRepo   string
	retrier      *retier.Retrier
}

type Opts struct {
	SourceOwner string
	SourceRepo  string
}

func New(r *retier.Retrier, opts *Opts) *IssueManager {
	return &IssueManager{
		sourceOwner: opts.SourceOwner,
		sourceRepo:  opts.SourceRepo,
		retrier:     r,
	}
}

type CreateIssueOpts struct {
	Title    *string
	Body     *string
	Labels   *[]string
	Assignee *string
	State    *string
}

func (p *IssueManager) CreateIssue(ctx context.Context, opts *CreateIssueOpts) (*github.Issue, error) {
	token, err := git.GetGithubToken()
	if err != nil {
		return nil, fmt.Errorf("creating Github issue: %v", err)
	}
	ts := oauth2.StaticTokenSource(&oauth2.Token{AccessToken: token})
	tc := oauth2.NewClient(ctx, ts)
	client = github.NewClient(tc)

	i := &github.IssueRequest{
		Title:     opts.Title,
		Body:      opts.Body,
		Labels:    opts.Labels,
		Assignee:  opts.Assignee,
		State:     opts.State,
	}

	var issue *github.Issue
	var resp *github.Response
	err = p.retrier.Retry(func() error {
		issue, resp, err = client.Issues.Create(ctx, p.sourceOwner, p.sourceRepo, i)
		if resp.StatusCode == githubHelper.SecondaryRateLimitStatusCode {
			var b []byte
			_, err := resp.Body.Read(b)
			if err != nil {
				return fmt.Errorf("reading Github response body: %v", err)
			}
			if strings.Contains(string(b), githubHelper.SecondaryRateLimitResponse) {
				logger.V(4).Info("rate limited while attempting to create github issue")
				return fmt.Errorf("rate limited while attempting to create github issues: %v", err)
			}
		}
		if err != nil {
			return fmt.Errorf("creating Github issue: %v; resp: %v", err, resp)
		}
		return nil
	})
	if err != nil {
		return nil, fmt.Errorf("creating github issue: %v", err)
	}
	logger.V(4).Info("sleeping after Issue creation to avoid secondary rate limiting by Github content API")
	time.Sleep(time.Second * 1)

	logger.V(4).Info("create issue response", "response", resp.Response.StatusCode)

	return issue, nil
}