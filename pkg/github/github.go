package github

import (
	"context"
	"fmt"
	"github.com/aws/eks-anywhere/pkg/api/v1alpha1"
	"github.com/aws/eks-anywhere/pkg/git"


	goGithub "github.com/google/go-github/v35/github"

	"github.com/danbudris/vulnerabilityProcessor/pkg/logger"
)

const (
	GitProviderName    = "github"
	EksaGithubTokenEnv = "EKSA_GITHUB_TOKEN"
	GithubTokenEnv     = "GITHUB_TOKEN"
	githubUrlTemplate  = "https://github.com/%v/%v.git"
	patRegex           = "^[A-Za-z0-9_]{40}$"
	repoPermissions    = "repo"
)

type githubProvider struct {
	githubProviderClient GithubClient
	config               *v1alpha1.GithubProviderConfig
	auth                 git.TokenAuth
}

type Options struct {
	Repository string
	Owner      string
	Personal   bool
}

// GithubClient represents the attributes that the Github provider requires of a library to directly connect to and interact with the Github API.
type GithubClient interface {
}

func New(githubProviderClient GithubClient, config *v1alpha1.GithubProviderConfig, auth git.TokenAuth) (*githubProvider, error) {
	return &githubProvider{
		githubProviderClient: githubProviderClient,
		config:               config,
		auth:                 auth,
	}, nil
}

type CreatePrOpts struct {}

func (g *githubProvider) CreatePr(ctx context.Context, opts CreatePrOpts) (git.Repository, err error) {
	return g.githubProviderClient.CreatePr(ctx, opts)
}

type GitProviderNotFoundError struct {
	Provider string
}

func (e *GitProviderNotFoundError) Error() string {
	return fmt.Sprintf("git provider %s not found", e.Provider)
}

func RepoUrl(owner string, repo string) string {
	return fmt.Sprintf(githubUrlTemplate, owner, repo)
}