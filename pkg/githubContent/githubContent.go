package githubContent

import (
	"context"
	"fmt"
	"github.com/danbudris/vulnerabilityProcessor/pkg/git"
	"golang.org/x/oauth2"
	"strings"
	"time"

	"github.com/google/go-github/v45/github"

	githubHelper "github.com/danbudris/vulnerabilityProcessor/pkg/github"
	"github.com/danbudris/vulnerabilityProcessor/pkg/logger"
	"github.com/danbudris/vulnerabilityProcessor/pkg/retier"
)

type Opts struct {
	Owner string
	File string
    Repo string
}

func GetGithubRepositoryFileContent(ctx context.Context, retrier *retier.Retrier, opts *Opts) ([]byte, error){
	token, err := git.GetGithubToken()
	if err != nil {
		return []byte{}, fmt.Errorf("creating pull request: %v", err)
	}
	ts := oauth2.StaticTokenSource(&oauth2.Token{AccessToken: token})
	tc := oauth2.NewClient(ctx, ts)
	g := github.NewClient(tc)

	var resp *github.Response
	var f *github.RepositoryContent
	var c string

	logger.Info("Getting Github repository contents", "repository", opts.Repo, "path", opts.File, "owner", opts.Owner)

	err = retrier.Retry(func() error {
		o := &github.RepositoryContentGetOptions{
			Ref: "main",
		}
		f, _, resp, err = g.Repositories.GetContents(ctx, opts.Owner, opts.Repo, opts.File, o)
		if err != nil {
			return fmt.Errorf("getting repository content: %v", err)
		}
		if resp.StatusCode == githubHelper.SecondaryRateLimitStatusCode {
			if strings.Contains(err.Error(), githubHelper.SecondaryRateLimitResponse) {
				return fmt.Errorf("rate limited while attempting to get github repository content: %v", err)
			}
		}
		if err != nil {
			return fmt.Errorf("getting Github repository content: %v; resp: %v", err, resp)
		}
		return nil
	})
	if err != nil {
		return  []byte{}, fmt.Errorf("getting github repository content: %v", err)
	}
	logger.V(4).Info("sleeping after fetching repository content to avoid secondary rate limiting by Github content API")
	time.Sleep(time.Second * 1)

	c, err = f.GetContent()
	if err != nil {
		return nil, fmt.Errorf("decoding repository content: %v", err)
	}
	return []byte(c), nil
}
