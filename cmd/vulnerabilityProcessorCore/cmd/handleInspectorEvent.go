package cmd

import (
	"fmt"
	"github.com/danbudris/vulnerabilityProcessor/pkg/messageSources"
	"github.com/danbudris/vulnerabilityProcessor/pkg/vulnerabilitySources"
	"log"
	"os"
	"time"

	"github.com/spf13/cobra"
	"github.com/spf13/viper"

	"github.com/danbudris/vulnerabilityProcessor/pkg/api"
	"github.com/danbudris/vulnerabilityProcessor/pkg/inspectorHelper"
	"github.com/danbudris/vulnerabilityProcessor/pkg/issueManager"
	prcreator "github.com/danbudris/vulnerabilityProcessor/pkg/prManager"
	"github.com/danbudris/vulnerabilityProcessor/pkg/vexManager"
	"github.com/danbudris/vulnerabilityProcessor/pkg/workflow"
)

const (
	owner = "danbudris"
	repo = "vulnerabilityProcessor"
	inspectorFindingEventInputFlag = "inspectorFindingEvent"
)

var handleInspectorEvent = &cobra.Command{
	Use:   "inspectorEvent",
	Short: "handle an Inspector V2 EventBridge Event",
	Long:  "Ingest an Inspector V2 EventBridge Event and execute a chain of handlers to process it",
	RunE: func(cmd *cobra.Command, args []string) error {

		// set up the VEX document manager
		v, err := vexManager.New(viper.GetString(vexFilepathFlag))
		if err != nil {
			return fmt.Errorf("setting up vex manager: %v", err)
		}

		// set up the Inspector Event Handler
		inspectorHandler := workflow.NewInspector(*v)

		// set up PR Creator handler
		o := &prcreator.Opts{
			SourceOwner: owner,
			SourceRepo:  repo,
			PrRepo:      repo,
			PrRepoOwner: owner,
		}
		prCreator := prcreator.New(o)

		prHandlerOpts := workflow.VexPrCreatorOpts{
			AuthorName:         "VEX PR Bot",
			AuthorEmail:        "d.c.budris@gmail.com",
			PrBranch:           "main",
			VexDocumentGitPath: "test.vex",
		}
		prHandler := workflow.VexPrCreatorHandler(v, prCreator, prHandlerOpts)

		// set up the Issue Creator handler
		issueManagerOpts := &issueManager.Opts{
			SourceOwner: owner,
			SourceRepo:  repo,
		}
		issueManager := issueManager.New(issueManagerOpts)

		issueHandlerOpts := workflow.GithubIssueCreatorOpts{
			Labels: &[]string{"hey", "there", "test"},
		}
		issueHandler := workflow.IssueCreatorHandler(v, issueManager, issueHandlerOpts)

		// set up the handler chain
		prHandler.SetNextHandler(issueHandler)
		inspectorHandler.SetNextHandler(prHandler)

		// set up the workflow context containing context for executing the handler chain
		wCtx := workflow.NewContext()
		wCtx.SetVex(v)
		wCtx.FindingSource = vulnerabilitySources.InspectorV2
		wCtx.MessageSource = messageSources.EventBridge

		event, err := readFile(viper.GetString(inspectorFindingEventInputFlag))
		if err != nil {
			return fmt.Errorf("reading inspector event from file: %v", err)
		}
		vulnerability, err := inspectorEventBridgeEventToVulnerabilityFinding(event, v)
		if err != nil {
			return fmt.Errorf("converting InspectorV2 EventBridge event to vulnerabilitiy finding: %v", err)
		}
		wCtx.AddVulnerabilitiy(vulnerability)

		// invoke the handler chain
		return inspectorHandler.Handle(cmd.Context(), wCtx, vulnerability)
	},
}

func init() {
	handleCmd.AddCommand(handleInspectorEvent)
	handleInspectorEvent.Flags().StringP(inspectorFindingEventInputFlag, "e", "", "Inspector EventBridge event")
	err := viper.BindPFlags(handleInspectorEvent.Flags())
	if err != nil {
		log.Fatalf("Error initializing flags: %v", err)
	}
}

func readFile(filepath string) ([]byte, error) {
	b, err := os.ReadFile(filepath)
	if err != nil {
		return nil, fmt.Errorf("loading vex file: %v", err)
	}
	return b, nil
}

func inspectorEventBridgeEventToVulnerabilityFinding(eventBytes []byte, vex *vexManager.Manager) (*api.VulnerabilityFinding, error) {
	f, err := inspectorHelper.ReadFindingFromBytes(eventBytes)
	if err != nil {
		return nil, fmt.Errorf("reading inspector finding: %v", err)
	}
	v := &api.VulnerabilityFinding{
		VulnerabilityId:     f.PackageVulnerabilityDetails.VulnerabilityId,
		MessageSource:       messageSources.EventBridge,
		VulnerabilitySource: vulnerabilitySources.InspectorV2,
		RecievedTimestamp:   time.Now().String(),
		DetectedTimestamp:   f.FirstObservedAt,
		AffectedResourceId:  f.Resources[0].Id,
		Severity:            f.Severity,
		RawEvent:            eventBytes,
		Vex:                 vex,
	}
	return v, nil
}
