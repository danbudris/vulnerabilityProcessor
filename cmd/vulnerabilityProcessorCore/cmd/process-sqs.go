package cmd

import (
	"context"
	"fmt"
	"log"

	"github.com/danbudris/vulnerabilityProcessor/pkg/logger"
	"github.com/danbudris/vulnerabilityProcessor/pkg/sqsHelper"

	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/sqs"
	"github.com/spf13/cobra"
	"github.com/spf13/viper"
)

var processSqsCommand = &cobra.Command{
	Use:   "process-sqs",
	Short: "Start a polling loop reading from an SQS queue for vulnerabilities",
	Long:  "Run a polling loop reading from the given SQS queue and processing vulnerabilities",
	RunE: func(cmd *cobra.Command, args []string) error {
		sess, err := setupSession(viper.GetString("sqs-region"))
		if err != nil {
			log.Fatalf("Error polling SQS queue: %v", err)
		}
		err = processSqs(cmd.Context(), sess, viper.GetString("sqs-url"))
		if err != nil {
			log.Fatalf("Error getting image versions: %v", err)
		}
		return nil
	},
}

func init() {
	rootCmd.AddCommand(processSqsCommand)
	processSqsCommand.Flags().String("sqs-url", "", "AWS SQS queue URL")
	processSqsCommand.Flags().String("sqs-region", "us-east-1", "The AWS region of the SQS queue to listen to")
	err := viper.BindPFlags(processSqsCommand.Flags())
	if err != nil {
		log.Fatalf("Error initializing flags: %v", err)
	}
}

func setupSession(region string) (*session.Session, error){
	sess, err := session.NewSessionWithOptions(session.Options{
		Config: aws.Config{
			Region:                        aws.String(region),
			CredentialsChainVerboseErrors: aws.Bool(true),
		},
	})
	if err != nil {
		return nil, fmt.Errorf("setting up session: %v", err)
	}
	return sess, nil
}

func processSqs(ctx context.Context, sess *session.Session, sqsQueueUrl string) error {
	q := sqsHelper.NewSQS(sess, 1)

	chnMessages := make(chan *sqs.Message, 10)
	go pollSqs(ctx, chnMessages, sqsQueueUrl, q)

	logger.Info("Listening to queue", "queue", sqsQueueUrl)

	for message := range chnMessages {
		err := handleMessage(message)
		if err == nil {
			err = deleteMessage(message)
			if err != nil {
				logger.Error(err, "delete message failed")
			}
		}
		if err != nil {
			logger.Error(err, "handling message")
		}
	}
	return nil
}

func pollSqs(ctx context.Context, chn chan<- *sqs.Message, sqsQueueUrl string, q sqsHelper.SQS) {
	for {
		m, err := q.Receive(ctx, sqsQueueUrl, 10)
		if err != nil {
			logger.Error(err, "failed to receive message")
		}

		for _, message := range m {
			chn <- message
		}
	}
}

func handleMessage(m *sqs.Message) error {
	fmt.Printf("%v", m)
	return nil
}

func deleteMessage(m *sqs.Message) error {
	logger.V(1).Info("here we would delete the message", "msg", m)
	return nil
}