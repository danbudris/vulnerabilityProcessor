package cmd

import (
	"context"
	"fmt"
	prcreator "github.com/danbudris/vulnerabilityProcessor/pkg/github"
	"log"

	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/sqs"
	"github.com/spf13/cobra"
	"github.com/spf13/viper"

	"github.com/danbudris/vulnerabilityProcessor/pkg/logger"
	"github.com/danbudris/vulnerabilityProcessor/pkg/sqsHandlers"
	"github.com/danbudris/vulnerabilityProcessor/pkg/sqsHelper"
	"github.com/danbudris/vulnerabilityProcessor/pkg/vexManager"
)

const (
	sqsRegionFlag = "sqs-region"
	sqsDefaultRegion = "us-east-1"
	sqsUrlFlag = "sqs-url"
)

var listenSqs = &cobra.Command{
	Use:   "sqs",
	Short: "Start a polling loop reading from an SQS queue for vulnerabilities",
	Long:  "Run a polling loop reading from the given SQS queue and processing vulnerabilities",
	RunE: func(cmd *cobra.Command, args []string) error {

		o := &prcreator.Opts{
			SourceOwner: "danbudris",
			SourceRepo:  "vulnerabilityProcessor",
			PrRepo:      "vulnerabilityProcessor",
			PrRepoOwner: "danbudris",
		}
		pr := prcreator.New(o)

		prOpts := &prcreator.CreatePrOpts{
			CommitBranch:  "testBranch3",
			BaseBranch:    "main",
			SourceFiles:   "../../test.vex:anotherTest.vex",
			AuthorName:    "vex bot",
			AuthorEmail:   "d.c.budris@gmail.com",
			CommitMessage: "Hey there this is a test commit",
			PrSubject:     "a test pr",
			PrBranch:      "main",
			PrDescription: "a test PR description yo",
		}

		pr.CreatePr(prOpts)

		sess, err := setupSession(viper.GetString(sqsRegionFlag))
		if err != nil {
			log.Fatalf("Error polling SQS queue: %v", err)
		}

		v, err := vexManager.New(viper.GetString(vexFilepathFlag))
		if err != nil {
			return fmt.Errorf("setting up vex manager: %v", err)
		}
		h := sqsHandlers.NewInspector(v)
		q := sqsHelper.NewSQS(sess, 1)

		err = processSqs(cmd.Context(), q, h, viper.GetString(sqsUrlFlag))
		if err != nil {
			log.Fatalf("Error getting image versions: %v", err)
		}
		return nil
	},
}

func init() {
	listenCmd.AddCommand(listenSqs)
	listenSqs.Flags().String(sqsUrlFlag, "", "AWS SQS queue URL")
	listenSqs.Flags().String(sqsRegionFlag, sqsDefaultRegion, fmt.Sprintf("The AWS region of the SQS queue to listen to. Defaults to %s", sqsDefaultRegion))
	err := viper.BindPFlags(listenSqs.Flags())
	if err != nil {
		log.Fatalf("Error initializing flags: %v", err)
	}
}

func setupSession(region string) (*session.Session, error){
	sess, err := session.NewSessionWithOptions(session.Options{
		Config: aws.Config{
			Region:                        aws.String(region),
			CredentialsChainVerboseErrors: aws.Bool(true),
		},
	})
	if err != nil {
		return nil, fmt.Errorf("setting up session: %v", err)
	}
	return sess, nil
}

	func processSqs(ctx context.Context, q sqsHelper.SQS, h sqsHandlers.Handler, sqsQueueUrl string) error {
	chnMessages := make(chan *sqs.Message, 10)
	go pollSqs(ctx, chnMessages, sqsQueueUrl, q, 10)

	logger.Info("Listening to queue", "queue", sqsQueueUrl)

	for message := range chnMessages {
		err := h.HandleMessage(message)
		if err != nil {
			logger.Error(err, "handling finding")
		}
		if err == nil {
			err = q.Delete(ctx, sqsQueueUrl, *message.ReceiptHandle)
			if err != nil {
				logger.Error(err, "deleting sqs message ", "queue", sqsQueueUrl, "message", message.MessageId)
			}
		}
		if err != nil {
			logger.Error(err, "handling sqs message", "queue", sqsQueueUrl, "message", message.MessageId)
		}
	}
	return nil
}

func pollSqs(ctx context.Context, chn chan<- *sqs.Message, sqsQueueUrl string, q sqsHelper.SQS, maxMessages int64) {
	for {
		m, err := q.Receive(ctx, sqsQueueUrl, maxMessages)
		if err != nil {
			logger.Error(err, "failed to receive message", "queue", sqsQueueUrl)
		}

		for _, message := range m {
			chn <- message
		}
	}
}
