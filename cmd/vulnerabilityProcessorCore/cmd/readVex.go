package cmd

import (
	"context"
	"encoding/json"
	"github.com/danbudris/vulnerabilityProcessor/pkg/logger"
	"github.com/danbudris/vulnerabilityProcessor/pkg/vexManager"
	"log"
	"os"

	"github.com/spf13/cobra"
)

var readVexCommand = &cobra.Command{
	Use:   "read-vex",
	Short: "Read a VEX document from a file",
	Long:  "Given a JSON formatted VEX document, read it into Go structs and print to console",
	RunE: func(cmd *cobra.Command, args []string) error {
		err := process(cmd.Context())
		if err != nil {
			log.Fatalf("Error getting image versions: %v", err)
		}
		return nil
	},
}

func init() {
	rootCmd.AddCommand(readVexCommand)
}

func process(ctx context.Context) error {
	f := "./test.vex"
	m, err := vexManager.New(f)
	if err != nil {
		logger.Error(err, "could not load vex file")
		return err
	}
	b, err := json.Marshal(m.Document())
	if err != nil {
		logger.Error(err,"could not marshal VEX to bytes")
		return err
	}
	_, err = os.Stdout.Write(b)
	if err != nil {
		logger.Error(err,"could not write to stdout")
		return err
	}
	exists := m.GetVulnerability("CVE-2021-45105")
	logger.V(1).Info("Exisitng CVE")
	logger.V(1).Info("CVE Found", "CVE", exists)

	doesNotExist := m.GetVulnerability("CVE-2021-45105010101")
	logger.V(1).Info("Does Not Exist")
	logger.V(1).Info("CVE not found", "CVE", doesNotExist)

	return nil
}